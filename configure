#!/bin/bash
#
# Copyright (c) 2012, 2014, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This is a thin wrapper which will call the real configure script, and
# make sure that is called using bash.

# Get an absolute path to this script
this_script_dir=`dirname $0`
this_script_dir=`cd $this_script_dir > /dev/null && pwd`

export TOPDIR="$this_script_dir"

# Basic configuration options for JDK8 - Java only
CONFIG_OPTS="--enable-debug \
             --with-target-bits=64 \
             --with-debug-level=release \
             --with-jvm-variants=server \
             --with-conf-name=macosx-x86_64-normal-server-release"

# Set build environment variables
export LANG=C
export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:$PATH"
export COMPILE_TYPE=java-only
export OPENJDK_TARGET_CPU_BITS=64
export SKIP_COMPILER_CHECK=true
export JDK_ONLY=true
export OPENJDK_TARGET_OS=macosx
export OPENJDK_TARGET_CPU=x86_64
export BOOT_JDK="$JAVA_HOME"
export ALT_BOOTDIR="$JAVA_HOME"
export JAVA_HOME="$JAVA_HOME"
export DISABLE_HOTSPOT=true
export DISABLE_NATIVE=true
export BUILD_LANGTOOLS_ONLY=true

# Clean any previous build artifacts
rm -rf build
rm -f config.cache
rm -f common/autoconf/generated-configure.sh

# Generate fresh configure scripts
cd common/autoconf
bash ./autogen.sh
cd ../..

# Create output directory structure
build_dir="$this_script_dir/build/macosx-x86_64-normal-server-release"
mkdir -p "$build_dir"/{gensrc,classes,dist}
mkdir -p "$build_dir/gensrc/com/sun/tools/javah/resources"

# Delegate to wrapper
bash -c ". $this_script_dir/common/autoconf/configure" $this_script_dir/configure $CONFIG_OPTS "$@"

# Create spec.gmk if it doesn't exist
if [ ! -f "$build_dir/spec.gmk" ]; then
    cat > "$build_dir/spec.gmk" << EOF
# Build configuration
TOPDIR := $this_script_dir
OUTPUT_ROOT := $this_script_dir/build
CONF_NAME := macosx-x86_64-normal-server-release

# Build components control
BUILD_LANGTOOLS := true
BUILD_JDK := true
BUILD_HOTSPOT := false
BUILD_JAXP := false
BUILD_JAXWS := false
BUILD_CORBA := false

# OS/CPU configuration
OPENJDK_TARGET_OS := macosx
OPENJDK_TARGET_CPU := x86_64
OPENJDK_TARGET_CPU_BITS := 64

# Build settings
JDK_ONLY := true
DISABLE_HOTSPOT := true
DISABLE_NATIVE := true
ENABLE_ONLY_JAVAC := true
BOOT_JDK := $JAVA_HOME
ALT_BOOTDIR := $JAVA_HOME

# Build paths
JDK_TOPDIR := \$(TOPDIR)/jdk
LANGTOOLS_TOPDIR := \$(TOPDIR)/langtools
MAKEBASE_DIR := \$(TOPDIR)/make/common
OUTPUTDIR := \$(OUTPUT_ROOT)/\$(CONF_NAME)
GENSRCDIR := \$(OUTPUTDIR)/gensrc
CLASSDIR := \$(OUTPUTDIR)/classes
DISTDIR := \$(OUTPUTDIR)/dist

# Tools
JAVAC := \$(BOOT_JDK)/bin/javac
JAR := \$(BOOT_JDK)/bin/jar
MKDIR := mkdir -p
RM := rm -rf
ECHO := echo
CP := cp -f
FIND := find

# Javac options for langtools
LANGTOOLS_JAVAC_OPTS := -d \$(CLASSDIR) \\
              -encoding UTF-8 \\
              -g \\
              -Xlint:none \\
              -source 8 \\
              -target 8 \\
              -bootclasspath \$(BOOT_JDK)/jre/lib/rt.jar

# Javac options for JDK
JDK_JAVAC_OPTS := -sourcepath \$(JDK_TOPDIR)/src/share/classes:\$(LANGTOOLS_TOPDIR)/src/share/classes \\
              -d \$(CLASSDIR) \\
              -encoding UTF-8 \\
              -g \\
              -Xlint:none \\
              -source 8 \\
              -target 8 \\
              -classpath \$(CLASSDIR) \\
              -bootclasspath \$(BOOT_JDK)/jre/lib/rt.jar \\
              -XDignore.symbol.file=true

# Build rules
.PHONY: default java-only prepare-dirs clean-classes langtools-build jdk-java-build

default: java-only

java-only: prepare-dirs clean-classes langtools-build jdk-java-build

prepare-dirs:
	@\$(MKDIR) \$(GENSRCDIR)/com/sun/tools/javah/resources
	@\$(MKDIR) \$(CLASSDIR)
	@\$(MKDIR) \$(DISTDIR)
	@\$(ECHO) "jdk=\\nfull=\\nrelease=\\n" > \$(GENSRCDIR)/com/sun/tools/javah/resources/version.properties

clean-classes:
	@\$(RM) \$(CLASSDIR)
	@\$(MKDIR) \$(CLASSDIR)

langtools-build:
	@echo "Building langtools..."
	@\$(JAVAC) \$(LANGTOOLS_JAVAC_OPTS) \$(shell \$(FIND) \$(LANGTOOLS_TOPDIR)/src/share/classes -name "*.java")
	@\$(JAR) cf \$(DISTDIR)/tools.jar -C \$(CLASSDIR) .

jdk-java-build:
	@echo "Building JDK Java sources..."
	@\$(JAVAC) \$(JDK_JAVAC_OPTS) \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/java -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/javax -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/org -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/com/sun/java -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/com/sun/org -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/sun/applet -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/sun/awt -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/sun/java2d -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/sun/net -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/sun/rmi -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/sun/security -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/sun/text -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/sun/util -name "*.java") \\
		\$(shell \$(FIND) \$(JDK_TOPDIR)/src/share/classes/sun/misc -name "*.java")
	@\$(JAR) cf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/io
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/lang
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/lang/annotation
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/lang/invoke
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/lang/ref
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/lang/reflect
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/math
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/net
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/nio
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/nio/channels
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/nio/channels/spi
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/nio/charset
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/nio/charset/spi
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/nio/file
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/nio/file/attribute
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/nio/file/spi
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/security
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/security/cert
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/security/interfaces
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/security/spec
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/text
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/text/spi
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/time
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/time/chrono
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/time/format
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/time/temporal
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/time/zone
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/concurrent
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/concurrent/atomic
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/concurrent/locks
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/function
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/jar
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/logging
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/regex
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/spi
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/stream
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) java/util/zip
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/crypto
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/crypto/interfaces
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/crypto/spec
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/net
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/net/ssl
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/script
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/security/auth
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/security/auth/callback
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/security/auth/login
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/security/auth/spi
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/security/auth/x500
	@\$(JAR) uf \$(DISTDIR)/rt.jar -C \$(CLASSDIR) javax/security/cert
	@echo "Build completed successfully!"
	@echo "Generated rt.jar can be found at: \$(DISTDIR)/rt.jar"
EOF
fi

# Create a minimal Makefile in the root directory
cat > "$this_script_dir/Makefile" << EOF
SPEC := $build_dir/spec.gmk
include \$(SPEC)

java-only: langtools-build jdk-java-build
EOF
